/**
 * This project's description goes here
 *
 * @author  Some author's name
 * @version v0.0.0
 */
/**
 * Variables to be used throughout the project
 */
/* ==========================================================================
   Normalize.scss settings
   ========================================================================== */
/**
 * Includes legacy browser support IE6/7
 *
 * Set to false if you want to drop support for IE6 and IE7
 */
/* Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 * 3. Corrects text resizing oddly in IE 6/7 when body `font-size` is set using
 *  `em` units.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
.project-header-container,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevents modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Addresses styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 8/9/10.
 * 2. Improves image quality when scaled in IE 7.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *  Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 * 4. Improves appearance and consistency in all browsers.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *  and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *  `input` and others.
 * 4. Removes inner spacing in IE 7 without affecting normal text inputs.
 *  Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 *  Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */ }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 * 3. Corrects text not wrapping in Firefox 3.
 * 4. Corrects alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/* ==========================================================================
   Helper classes
   ========================================================================== */
/*
 * Hide visually and from screen readers: h5bp.com/u
 */
.hidden {
  display: none !important;
  visibility: hidden; }

/*
 * Hide only visually, but have it available for screen readers: h5bp.com/v
 */
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px; }

/*
 * Extends the .visuallyhidden class to allow the element to be focusable
 * when navigated to via the keyboard: h5bp.com/p
 */
.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto; }

/*
 * Hide visually and from screen readers, but maintain layout
 */
.invisible {
  visibility: hidden; }

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.explode-container:after {
  content: "";
  display: table;
  clear: both; }

/**
 * Typography is specified in here.
 */
html {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }

body {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-weight: 300; }

b, strong {
  font-weight: 500; }

h1,
h2,
h3 {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  color: #7e98ee;
  font-weight: 400;
  margin: 0;
  text-align: left; }

h4 {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-weight: 600; }

a {
  color: #7e98ee; }

h1 {
  font-weight: 300;
  font-size: 4rem;
  line-height: 1.333;
  margin-bottom: 1.5rem;
  color: #fff; }
  h1 a {
    text-decoration: none; }
  @media (min-width: 0px) and (max-width: 900px) {
    h1 {
      font-size: 3.5rem; } }
  @media (min-width: 0px) and (max-width: 500px) {
    h1 {
      font-size: 2.75rem; } }

.project-grid h1 {
  color: #7e98ee; }

h2 {
  font-size: 1.25rem;
  margin-bottom: .5rem; }
  h2 a {
    transition: all .2s;
    color: #7e98ee;
    text-decoration: none;
    color: #222; }
    h2 a:hover {
      color: #7e98ee; }

h3 {
  text-align: left;
  font-size: 1.063rem; }
  h3.city {
    color: white;
    text-align: center;
    margin: .75rem 0; }

h5 {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-size: 1.75rem;
  font-weight: 300;
  color: white;
  margin: 0; }
  @media (min-width: 0px) and (max-width: 900px) {
    h5 {
      font-size: 1.5rem; } }
  @media (min-width: 0px) and (max-width: 500px) {
    h5 {
      font-size: 1.25rem; } }

h6 {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-size: 1rem;
  font-weight: 300;
  line-height: 1;
  color: #7e98ee;
  text-align: left; }

p {
  font-size: 1.125rem;
  line-height: 1.6;
  font-weight: 300;
  text-align: left;
  margin: 0 0 1.25rem 0;
  -webkit-font-variant-ligatures: common-ligatures;
          font-variant-ligatures: common-ligatures; }
  @media (min-width: 0px) and (max-width: 500px) {
    p {
      font-size: 1rem; } }

ul {
  margin: 0;
  padding: 0;
  list-style-type: none; }

.name {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-weight: 700;
  font-size: 7.2vw;
  letter-spacing: .03em;
  line-height: .8;
  text-align-last: justify;
  text-decoration: none;
  text-transform: uppercase;
  overflow: hidden; }
  @media (min-width: 0px) and (max-width: 1000px) {
    .name {
      font-size: 10.4vw; } }
  .name a {
    text-decoration: none;
    transition: all .2s;
    color: white; }
    .name a:hover {
      color: rgba(255, 255, 255, 0.8); }

.contact, .social {
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-size: .875rem;
  font-weight: 300;
  white-space: nowrap; }
  .contact a, .social a {
    color: white;
    text-decoration: none;
    transition: all .2s; }
    .contact a:hover, .social a:hover {
      color: rgba(255, 255, 255, 0.8); }
    .contact a .svg-inline--fa, .social a .svg-inline--fa {
      font-weight: 400; }

.caption {
  font-size: .875rem;
  margin-bottom: 1rem;
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-weight: 300;
  color: #222; }

.meta {
  font-size: .875em;
  margin: 0; }

/*------------------------
Project pages
------------------------*/
#project-intro h1 {
  font-size: 2.5rem; }

#project-intro h3, #project-intro p, #project-intro a {
  color: #fff; }

.browse-container h2, .browse-container h3, .browse-container p, .browse-container li {
  color: #fff;
  text-align: left; }
  .browse-container h2 a, .browse-container h3 a, .browse-container p a, .browse-container li a {
    color: #fff;
    text-decoration: none;
    transition: all .2s;
    border-bottom: 1px solid transparent; }
    .browse-container h2 a:hover, .browse-container h3 a:hover, .browse-container p a:hover, .browse-container li a:hover {
      border-bottom: 1px solid #fff; }

.browse-container h2 {
  font-weight: 300;
  font-size: 2rem;
  line-height: 1.333;
  margin-bottom: 1rem; }

.browse-container li {
  font-size: 1.25rem;
  margin-bottom: .25rem; }

/* ==========================================================================
   Animate elements
   ========================================================================== */
.load-fade-in {
  visibility: hidden; }

.no-js .load-fade-in, .no-js .animation-new {
  visibility: visible; }

.scroll-fade-in {
  visibility: hidden; }

.no-js .fade-in {
  visibility: visible; }

/*
 * HTML5 Boilerplate
 *
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */
/* ==========================================================================
   Base styles: opinionated defaults
   ========================================================================== */
html,
button,
input,
select,
textarea {
  color: #222; }

html {
  box-sizing: border-box; }

*, *:before, *:after {
  box-sizing: inherit; }

body {
  font-size: 16px;
  line-height: 1.4;
  font-weight: 300;
  background: linear-gradient(155deg, #7e98ee 0%, #76c7f2 100%);
  background-attachment: fixed; }

canvas {
  width: 100% !important;
  height: auto !important; }

/*
 * Remove text-shadow in selection highlight: h5bp.com/i
 * These selection declarations have to be separate.
 * Customize the background color to match your design.
 */
::-moz-selection {
  background: #b3d4fc;
  text-shadow: none; }

::selection {
  background: #b3d4fc;
  text-shadow: none; }

/*
 * A better looking default horizontal rule
 */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0; }

/*
 * Remove the gap between images and the bottom of their containers: h5bp.com/i/440
 */
img {
  width: 100%;
  height: auto;
  display: block; }

/*
 * Remove default fieldset styles.
 */
fieldset {
  border: 0;
  margin: 0;
  padding: 0; }

/*
 * Allow only vertical resizing of textareas.
 */
textarea {
  resize: vertical; }

/**
 * All styles related to markup inside the header
 */
header {
  width: 100%;
  margin: 1rem 0 2rem 0; }

.header-grid {
  width: 100%;
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: 1fr 3fr 1fr;
      grid-template-columns: 1fr 3fr 1fr;
  -ms-grid-rows: max-content;
      grid-template-rows: max-content;
  margin: 1rem 0 2rem 0; }
  @media (min-width: 0px) and (max-width: 1000px) {
    .header-grid {
      -ms-grid-columns: 6% auto 6%;
          grid-template-columns: 6% auto 6%; } }
  .header-grid .name {
    -ms-grid-row: 1;
        grid-row-start: 1;
    -ms-grid-column: 2;
        grid-column-start: 2; }
  .header-grid .city {
    -ms-grid-row: 2;
        grid-row-start: 2;
    -ms-grid-column: 2;
        grid-column-start: 2; }
  .header-grid .header-sub-container {
    -ms-grid-row: 3;
        grid-row-start: 3;
    -ms-grid-column: 2;
        grid-column-start: 2;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-pack: center;
        justify-content: center;
    text-align: center;
    margin-top: .5rem; }
    .header-grid .header-sub-container .contact, .header-grid .header-sub-container .social {
      margin: 0 1rem; }
      @media (min-width: 0px) and (max-width: 500px) {
        .header-grid .header-sub-container .contact, .header-grid .header-sub-container .social {
          margin: 0 .75rem; } }
  .header-grid .browse-container {
    -ms-grid-row: 1;
        grid-row-start: 1;
    -ms-grid-column: 2;
        grid-column-start: 2; }

.contact {
  display: inline-block;
  margin: 0 2rem .5rem 0; }
  @media (min-width: 0px) and (max-width: 500px) {
    .contact {
      margin-right: 1.5rem; } }

.social {
  display: inline-block;
  text-align: right; }
  .social a {
    margin: 0 .5rem; }

/**
 * All styles related to markup inside the main element
 */
.container {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: 1fr;
      grid-template-columns: 1fr;
  padding: .5rem 2%; }

main, .project-header-container {
  margin: 0 0 2rem 0;
  padding: 0 7% 2rem 7%;
  background: rgba(255, 255, 255, 0.9); }

.intro.header-grid #intro-img {
  -ms-grid-row: 1;
      grid-row-start: 1;
  -ms-grid-column: 2;
      grid-column-start: 2;
  justify-self: center; }
  .intro.header-grid #intro-img img {
    width: 150px;
    border-radius: 50%; }

.intro.header-grid #intro {
  -ms-grid-row: 2;
      grid-row-start: 2;
  -ms-grid-column: 2;
      grid-column-start: 2;
  margin: 2rem 0 3rem;
  text-align: left; }

.intro.header-grid #project-intro {
  -ms-grid-row: 1;
      grid-row-start: 1;
  -ms-grid-column: 2;
      grid-column-start: 2;
  margin: 2rem 0 3rem;
  text-align: left; }

.project-grid {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: 1fr 1fr;
      grid-template-columns: 1fr 1fr;
  grid-column-gap: 6vw;
  grid-row-gap: 6vw;
  -ms-flex-align: stretch;
      align-items: stretch;
  margin: 2rem 0 0 0; }
  @media (min-width: 0px) and (max-width: 700px) {
    .project-grid {
      -ms-grid-columns: 1fr;
          grid-template-columns: 1fr;
      grid-row-gap: 10vw; } }
  @media (min-width: 0px) and (max-width: 500px) {
    .project-grid {
      margin: 1.5rem 0 0 0; } }
  .project-grid h1 {
    grid-column: 1 / 3; }
    @media (min-width: 0px) and (max-width: 700px) {
      .project-grid h1 {
        grid-column: 1 / 2; } }

.item {
  min-height: 100px; }
  .item .item-image {
    overflow: hidden; }

/* Tilt Effect */
.tilt {
  position: relative;
  transform-style: preserve-3d;
  transform: scale(1.03); }
  .tilt .tilt-front {
    position: absolute;
    transform: translateZ(20px);
    z-index: 10;
    top: 0; }
  .tilt .tilt-middle {
    position: absolute;
    transform: translateZ(10px);
    z-index: 5;
    top: 0; }
  .tilt .tilt-back {
    position: relative; }

/* Lazy Load */
.blur-up {
  -webkit-filter: blur(3px);
          filter: blur(3px);
  transition: -webkit-filter 750ms;
  transition: filter 750ms;
  transition: filter 750ms, -webkit-filter 750ms; }

.no-js .blur-up {
  -webkit-filter: blur(0px);
          filter: blur(0px);
  transition: -webkit-filter 750ms;
  transition: filter 750ms;
  transition: filter 750ms, -webkit-filter 750ms; }

.blur-up.lazyloaded {
  -webkit-filter: blur(0) drop-shadow(0 0 0 transparent);
          filter: blur(0) drop-shadow(0 0 0 transparent); }

/**
 * All styles related to markup inside the footer
 */
.browse-container {
  padding-bottom: 3rem; }

.project-main {
  padding: 0 4% 2rem 4%; }

.project {
  padding-top: 3rem;
  position: relative; }

.project-header-container {
  background: none; }

.project-header {
  position: absolute;
  width: 100%;
  top: -16px;
  height: 6rem;
  overflow: hidden;
  background-color: none; }
  .project-header .project-header-bg {
    height: 10rem;
    background: #7e98ee url("") center top;
    background-size: cover;
    -webkit-filter: blur(10px);
            filter: blur(10px);
    transform: scale(1.2);
    background-blend-mode: overlay; }

#intro h3 {
  margin-top: 2rem; }

.project-description {
  width: 72%;
  margin: 5.5rem auto 5rem; }
  @media (min-width: 0px) and (max-width: 750px) {
    .project-description {
      width: 90%;
      margin-top: 0; } }

.project p {
  padding: 2rem 17.4%; }
  @media (min-width: 0px) and (max-width: 1000px) {
    .project p {
      padding: 1rem 3.5% 2rem; } }

.project-images {
  width: 100%; }

.portfolio-img {
  margin-bottom: 3rem; }

.yrly-animation, .causeengine-animation, .vynamic-animation {
  width: 100%;
  background-size: cover;
  text-align: center;
  padding: 4rem 0;
  background-position: center; }
  @media (min-width: 0px) and (max-width: 700px) {
    .yrly-animation, .causeengine-animation, .vynamic-animation {
      padding: 2rem 0; } }

.yrly-animation {
  background-image: url(../img/yrly/yrly-animation-bg.jpg);
  padding: 2rem 0; }
  .yrly-animation svg {
    width: 80%;
    margin: 0 auto; }
    @media (min-width: 0px) and (max-width: 700px) {
      .yrly-animation svg {
        width: 90%; } }

.causeengine-animation {
  background-image: url(../img/causeengine/causeengine-animation-bg.jpg); }
  .causeengine-animation img {
    width: 50%;
    margin: 0 auto;
    padding: 1.5rem 0; }
    @media (min-width: 0px) and (max-width: 900px) {
      .causeengine-animation img {
        width: 70%; } }
    @media (min-width: 0px) and (max-width: 700px) {
      .causeengine-animation img {
        width: 90%;
        padding: 1rem 0; } }

.vynamic-animation {
  background: #ccc;
  box-shadow: inset 0 0 200px rgba(0, 0, 0, 0.1); }
  .vynamic-animation img {
    width: 30%;
    margin: 0 auto;
    box-shadow: 0 3px 15px rgba(0, 0, 0, 0.2); }
    @media (min-width: 0px) and (max-width: 900px) {
      .vynamic-animation img {
        width: 60%; } }
    @media (min-width: 0px) and (max-width: 700px) {
      .vynamic-animation img {
        width: 80%;
        padding: 1rem 0; } }

.explode-container {
  position: relative;
  width: 100%;
  padding: 7rem 7% 4rem 7%;
  margin: 1rem 0 2.5rem 0;
  background: #fff;
  box-shadow: inset 0 0 200px rgba(0, 0, 0, 0.1); }
  @media (min-width: 0px) and (max-width: 1000px) {
    .explode-container {
      padding: 1rem 1.5% 2rem; } }
  @media (min-width: 0px) and (max-width: 750px) {
    .explode-container {
      margin: 0 0 2rem; } }

#explode-buttons {
  position: absolute;
  top: 2rem;
  left: 1rem;
  z-index: 1; }
  @media (min-width: 0px) and (max-width: 1000px) {
    #explode-buttons {
      position: relative;
      padding: 0;
      top: 0;
      left: 0; } }

#explode, #reset-explode {
  position: relative;
  margin: 0 0 1.5rem 1rem;
  display: inline-block;
  color: #222;
  border: 1px solid #222;
  cursor: pointer;
  padding: .875rem 1rem;
  font-family: "ministry", Helvetica, Arial, sans-serif;
  font-size: .875rem;
  line-height: 1;
  border-radius: 3px;
  transition: all .2s; }
  #explode:hover, #reset-explode:hover {
    color: #7e98ee;
    border: 1px solid #7e98ee; }

#seps-container {
  /*width:50%;*/
  /* the widths are inline because they're all different */
  position: relative;
  margin: 0 auto;
  perspective: 2000px; }

#print-all {
  width: 100%;
  height: 100%;
  position: relative;
  transform-style: preserve-3d; }

.print-layer {
  position: absolute;
  transform-origin: 0 0;
  transition: all 600ms;
  -webkit-backface-visibility: hidden; }

#paper1 {
  box-shadow: 0 3px 15px rgba(0, 0, 0, 0.2); }

/**
 * An example module: Box
 *
 * @author Your Name
 * @date 01.01.1970
 */
/*
 * Configuration
 * Use module specific variables and prefix them with the namespace.
 *
 * @example $box-background: #ddd;
 */
/*
 * General styling
 * Define general styles as abstract as possible for a module and build variants
 * of your modules if you need to break out of the general style.
 */
/*
 * Media Queries
 * If you build mobile first or using another method you need Media Queries to
 * target different screen sizes. These should be included module-wise.
 */
@media print {
  /* ==========================================================================
   Print styles.
   Inlined to avoid the additional HTTP request: h5bp.com/r
   ========================================================================== */
  * {
    background: transparent !important;
    color: #000 !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important; }
  a,
  a:visited {
    text-decoration: underline; }
  a[href]:after {
    content: " (" attr(href) ")"; }
  abbr[title]:after {
    content: " (" attr(title) ")"; }
  /*
 * Don't show links that are fragment identifiers,
 * or use the `javascript:` pseudo protocol
 */
  a[href^="#"]:after,
  a[href^="javascript:"]:after {
    content: ""; }
  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid; }
  thead {
    display: table-header-group;
    /* h5bp.com/t */ }
  tr,
  img {
    page-break-inside: avoid; }
  img {
    max-width: 100% !important; }
  @page {
    margin: 0.5cm; }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3; }
  h2,
  h3 {
    page-break-after: avoid; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
